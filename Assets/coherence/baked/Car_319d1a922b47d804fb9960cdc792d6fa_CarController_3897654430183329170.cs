// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    
    public struct Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170 : ICoherenceComponentData
    {
        public static uint maxSpeedMask => 0b00000000000000000000000000000001;
        public System.Single maxSpeed;
        public static uint accelerationMulMask => 0b00000000000000000000000000000010;
        public System.Single accelerationMul;
        public static uint turnMulMask => 0b00000000000000000000000000000100;
        public System.Single turnMul;
        public static uint driftMulMask => 0b00000000000000000000000000001000;
        public System.Single driftMul;
        public static uint inertionMulMask => 0b00000000000000000000000000010000;
        public System.Single inertionMul;
        public static uint sideMovementForSkidmarksMask => 0b00000000000000000000000000100000;
        public System.Single sideMovementForSkidmarks;
        public static uint enabledMask => 0b00000000000000000000000001000000;
        public System.Boolean enabled;
        public static uint accelerationInputMask => 0b00000000000000000000000010000000;
        public System.Single accelerationInput;
        public static uint steeringInputMask => 0b00000000000000000000000100000000;
        public System.Single steeringInput;
        public static uint rotationAngleMask => 0b00000000000000000000001000000000;
        public System.Single rotationAngle;
        public static uint velocityVsUpMask => 0b00000000000000000000010000000000;
        public System.Single velocityVsUp;
        
        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 153;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000011111111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;
        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;  
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;   
        }
        
        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;
        public AbsoluteSimulationFrame Frame;
        
    
        public void SetSimulationFrame(AbsoluteSimulationFrame frame)
        {
            Frame = frame;
        }
        
        public AbsoluteSimulationFrame GetSimulationFrame() => Frame;
        
        public ICoherenceComponentData MergeWith(ICoherenceComponentData data, uint mask)
        {
            var other = (Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170)data;

            FieldsMask |= mask;
            StoppedMask &= ~(mask);

            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                maxSpeed = other.maxSpeed;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                accelerationMul = other.accelerationMul;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                turnMul = other.turnMul;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                driftMul = other.driftMul;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                inertionMul = other.inertionMul;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                sideMovementForSkidmarks = other.sideMovementForSkidmarks;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                enabled = other.enabled;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                accelerationInput = other.accelerationInput;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                steeringInput = other.steeringInput;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                rotationAngle = other.rotationAngle;
            }
            
            mask >>= 1;
            if ((mask & 0x01) != 0)
            {
                Frame = other.Frame;
                velocityVsUp = other.velocityVsUp;
            }
            
            mask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }
        
        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }
        
        public static uint Serialize(Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170 data, uint mask, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 11);
            }

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.maxSpeed;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.accelerationMul;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.turnMul;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.driftMul;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.inertionMul;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.sideMovementForSkidmarks;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.enabled;
            

            
                bitStream.WriteBool(fieldValue);
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.accelerationInput;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.steeringInput;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.rotationAngle;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
            
                var fieldValue = data.velocityVsUp;
            

            
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            
            mask >>= 1;
          
            return mask;
        }
        
        public static (Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170, uint) Deserialize(InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(11);
            }

            var mask = (uint)0;
            var val = new Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170();
            if (bitStream.ReadMask())
            {
                val.maxSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= maxSpeedMask;
            }
            if (bitStream.ReadMask())
            {
                val.accelerationMul = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= accelerationMulMask;
            }
            if (bitStream.ReadMask())
            {
                val.turnMul = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= turnMulMask;
            }
            if (bitStream.ReadMask())
            {
                val.driftMul = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= driftMulMask;
            }
            if (bitStream.ReadMask())
            {
                val.inertionMul = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= inertionMulMask;
            }
            if (bitStream.ReadMask())
            {
                val.sideMovementForSkidmarks = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= sideMovementForSkidmarksMask;
            }
            if (bitStream.ReadMask())
            {
                val.enabled = bitStream.ReadBool();
                mask |= enabledMask;
            }
            if (bitStream.ReadMask())
            {
                val.accelerationInput = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= accelerationInputMask;
            }
            if (bitStream.ReadMask())
            {
                val.steeringInput = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= steeringInputMask;
            }
            if (bitStream.ReadMask())
            {
                val.rotationAngle = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= rotationAngleMask;
            }
            if (bitStream.ReadMask())
            {
                val.velocityVsUp = bitStream.ReadFloat(FloatMeta.NoCompression());
                mask |= velocityVsUpMask;
            }
                    
            val.FieldsMask = mask;
            val.StoppedMask = stoppedMask;

            return (val, mask);
        }
        
        
        public void ResetByteArrays(ICoherenceComponentData lastSent, uint mask)
        {
            var last = lastSent as Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170?;
            
        }

        public override string ToString()
        {
            return $"Car_319d1a922b47d804fb9960cdc792d6fa_CarController_3897654430183329170(maxSpeed: { maxSpeed }, accelerationMul: { accelerationMul }, turnMul: { turnMul }, driftMul: { driftMul }, inertionMul: { inertionMul }, sideMovementForSkidmarks: { sideMovementForSkidmarks }, enabled: { enabled }, accelerationInput: { accelerationInput }, steeringInput: { steeringInput }, rotationAngle: { rotationAngle }, velocityVsUp: { velocityVsUp }, Mask: {System.Convert.ToString(FieldsMask, 2).PadLeft(11, '0')}), Stopped: {System.Convert.ToString(StoppedMask, 2).PadLeft(11, '0')})";
        }
    }
    

}